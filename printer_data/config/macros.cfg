###############################
# MACROS
###############################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 270.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 270.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 10.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 1.0   ; the value to retract while PAUSE
variable_cancel_retract  : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 40.0  ; retract speed in mm/s
variable_unretract       : 1.0   ; the value to unretract while RESUME
variable_speed_unretract : 30.0  ; unretract speed in mm/s
variable_speed_hop       : 10.0  ; z move speed in mm/s
variable_speed_move      : 200.0 ; move speed in mm/s
variable_park_at_cancel  : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
gcode:

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro PROBE_CENTER]
gcode:
    _CG28
    G90
    G1 X162.0 Y110.0 F5000.0 ; move to bed center
    BEACON_CALIBRATE

[gcode_macro SILENT_MODE_ON]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0
    SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadcycle VALUE=0
    SET_TMC_FIELD STEPPER=stepper_x FIELD=intpol VALUE=1
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadcycle VALUE=0
    SET_TMC_FIELD STEPPER=stepper_y FIELD=intpol VALUE=1
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=0
    SET_TMC_FIELD STEPPER=stepper_z FIELD=en_spreadcycle VALUE=0
    SET_TMC_FIELD STEPPER=stepper_z FIELD=intpol VALUE=1
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1

[gcode_macro SILENT_MODE_OFF]
gcode:
    SET_TMC_FIELD STEPPER=stepper_x FIELD=en_spreadcycle VALUE=1
    SET_TMC_FIELD STEPPER=stepper_x FIELD=intpol VALUE=0
    SET_TMC_FIELD STEPPER=stepper_y FIELD=en_spreadcycle VALUE=1
    SET_TMC_FIELD STEPPER=stepper_y FIELD=intpol VALUE=0
    SET_TMC_FIELD STEPPER=stepper_z FIELD=en_spreadcycle VALUE=1
    SET_TMC_FIELD STEPPER=stepper_z FIELD=intpol VALUE=0

[gcode_macro T0]
gcode:

[gcode_macro HEAT_SOAK]
gcode:
    {% set MIN_TEMP = 30 %}
    {% set TARGET_TEMP = params.CHAMBER_TEMP | default(45) | float %} #35 default for ASA
    {% set CHAMBER_CURRENT_TEMP = printer["temperature_sensor chamber"].temperature %}
    {% if TARGET_TEMP > CHAMBER_CURRENT_TEMP %}
    { action_respond_info('Chamber temperature is %.1fC. Heating to above %.1fC' % (CHAMBER_CURRENT_TEMP, TARGET_TEMP)) }
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=150
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=109
    G0 Z30 F3600
    TEMPERATURE_WAIT SENSOR='temperature_sensor chamber' MINIMUM={TARGET_TEMP} ; Wait for chamber temp
    {% endif %}

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
	{% set HOTEND_TEMP = params.HOTEND_TEMP|default(165)|float %}

    M140 S{params.BED_TEMP}     ; start bed heater
    M109 S150       ; preheat nozzle to probing temp
    SYNC_MOTORS
    M190 S{params.BED_TEMP}     ; wait on bed temperature
    G4 P60000       ; optional, let temps settle for 1 min

    BED_MESH_CLEAR
    #SET_GCODE_OFFSET Z=0

    _CG28     ; home axes
    G0 Z25   ; position beacon at 2mm for heat soak

    #G28 Z METHOD=CONTACT CALIBRATE=1    ; calibrate z offset and beacon model hot
    HEAT_SOAK
    SET_VELOCITY_LIMIT ACCEL=10000
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    #G28 Z METHOD=CONTACT CALIBRATE=0
    #SET_GCODE_OFFSET Z=0.175 ;0.22     ; add a little offset for hotend thermal expansion
    
    # Home and load bed mesh
    #_CG28
    #G29
    #BED_MESH_PROFILE LOAD=default

    G1 X5.1 Y20 Z0.3 F5000.0 ; Move to start position

    # Heat nozzle and bed
    M190 S{ params.BED_TEMP}
    M109 S{ params.HOTEND_TEMP}

    # Prime nozzle
    G92 E0
    G1 Z1.0 F3000 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5.1 Y100.0 Z0.3 F1500.0 E15 ; Draw the first line
    G1 X8.4 Y100.0 Z0.3 F5000.0 ; Move to side a little
    G1 X8.4 Y20 Z0.3 F1500.0 E30 ; Draw the second line
    G92 E0            
    G1 Z2.0 F600        
    G1 Z0.2 F600        
    G1 Z2.0 F600

    SET_VELOCITY_LIMIT ACCEL=60000

[gcode_macro END_PRINT]
gcode:
    # Disable heaters
    M104 S0                                
    M140 S0
    M106 S0

    # Fix-up extruder
    G91                                            
    G1 E-10 F2700  # retract to stop oozing                                  
    G1 E-1.5 Z0.2 F2400                        
    G1 X5 Y5 F6000                               
    G1 Z10                                     
    G90                                        

    # Present print
    G1 X100 Y270 F6000
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    {% if printer.toolhead.position.z < (max_z - 50) %}
    G1 Z{max_z - 50}
    {% endif %}

    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}

    # Disable Steppers and fan
    M84 X Y E
    M107

# Replacement-Macro to control the Fan with M106 P2 and M107 for BambuStudio
# Macro inspired by klipper-github issue https://github.com/Klipper3d/klipper/issues/2174
[gcode_macro M106]
rename_existing: G106
gcode:
    {% set P = params.P | default(0) | int %}
    {% set S = params.S | default(255) | int %}
    {% if P == 0 %}
        G106 S{S}
    {% else %}
        {% set fan = "Aux_Fan" if P == 2 else "Exhaust_fan" %}
        SET_FAN_SPEED FAN={fan} SPEED={S / 255}
    {% endif %}

#[gcode_macro M106]
#rename_existing: G106
#gcode:
#    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
#    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
#    SET_FAN_SPEED FAN={fan} SPEED={speed}

[gcode_macro M107]
rename_existing: G107
gcode:
    {% set fan = params.P|default(1)|int %}
	{% if fan == 2 %}
		SET_FAN_SPEED FAN=Aux_Fan SPEED=0
	{% elif fan == 3 %}
		SET_FAN_SPEED FAN=Exhaust_fan SPEED=0   
	{% else %}
	  SET_FAN_SPEED FAN=Aux_Fan SPEED=0  
	  SET_FAN_SPEED FAN=Exhaust_fan SPEED=0  
	  G107
	{% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
    M118 Filament unloading!
    M117 Filament unloading!
    M82 #set extruder to absolute mode
    G92 E0
    {% if printer.extruder.can_extrude|lower != 'true' %} # checing for minimum extrusion temperature
    # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
    M118 Hotend heating!
    M109 S235 T0 # set temperature and wait
    {% endif %}
    G1 E10 F{5*60}    # extrude a little to soften tip
    G0 E-5 F{60*60}   # extract filament to cold end
    G0 E-70 F{5*60}   # continue extraction slow allow filament to be cooled enough before reaches the gears
    M400
    M118 Filament unload complete!
    M117 Filament unload complete!


#[gcode_macro UNLOAD_FILAMENT]
#gcode:
#    {% set speed = params.SPEED|default(300) %}
#    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
#    SAVE_GCODE_STATE NAME=unload_state
#    G91
#    M300 # beep
#    G92 E0
#    G1 E5 F{speed} # purge
#    G1 E-50 F{max_velocity} # fast-unload
#    M300
#    M300
#    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro ACCEL_TEST_X]
gcode:
    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(500)|float * 60 %}

    {% set inset = 20.0|float %} 
    {% set accel = 5000|int %} 
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    #SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    _CG28
    G1 Z10
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        #SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{minX} Y{minY} F{speed}  
        G1 X{maxX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 

[gcode_macro ACCEL_TEST_Y]
gcode:
    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(500)|float * 60 %}

    {% set inset = 20.0|float %}
    {% set accel = 5000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    #SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    _CG28
    G1 Z10
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        #SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{maxX} Y{minY} F{speed}  
        G1 X{minX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 

[gcode_macro G29]
gcode:
    _CG28
    SET_VELOCITY_LIMIT ACCEL=10000 
    #SET_VELOCITY_LIMIT ACCEL_TO_DECEL=10000
    {% set BED_TEMP = params.BED_TEMP|default(105)|float %}
    #M190 S105                      
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    SET_VELOCITY_LIMIT ACCEL=30000 
    #SET_VELOCITY_LIMIT ACCEL_TO_DECEL=30000
    #SAVE_CONFIG

[pause_resume]

[gcode_macro M600]
gcode:
	PAUSE
	CHANGE_FILAMENT_START

[gcode_macro CHANGE_FILAMENT_START]
gcode:
	SAVE_GCODE_STATE NAME=M600_state
	G91
	G1 E-.8 F2700
	G1 Z10
	G90
	G1 X50 Y0 F3000
	G91
	G1 E-5 F300

[gcode_macro CHANGE_FILAMENT_END]
gcode:
	G91
	RESTORE_GCODE_STATE NAME=M600_state
	RESUME

[gcode_macro POWER_ON_LEDS]
gcode:
    {action_call_remote_method("set_device_power",
     device="LEDs",
     state="on")}

[gcode_macro POWER_OFF_PRINTER]
gcode:
    {action_call_remote_method("set_device_power",
     device="printer_plug",
     state="off")}

[gcode_macro PID_EXTRUDER]
description: PID Tune for the Extruder gcode:
gcode:
  _CG28
  G1 X150 Y150 Z2
  M106 S76
  M106 P2 S102
  {% set TARGET_TEMP = params.TARGET_TEMP|default(230)|float %}
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  M107
  #SAVE_CONFIG

[gcode_macro PID_BED]
description: PID Tune for the Bed gcode:
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(90)|float %}
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

[gcode_macro ENABLE_STEPPERS]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}

[gcode_macro TEST_AXIS_SPEED]
gcode:
    # Example: TEST_AXIS_SPEED SPEED=300 X_ACCEL=5000 Y_ACCEL=2000 ITERATIONS=10 Z=10
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(1)|int %}
    # Acceleration
    {% set x_accel  = params.X_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set y_accel  = params.Y_ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(30)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    {% set z_pos = params.ZPOS|default(10)|int %}

    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}

        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Home first
    G28

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_AXIS_SPEED

    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, x_accel %d, y_accel %d" % (iterations, speed, x_accel, y_accel)) }

    # Absolute positioning
    G90

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={x_accel}
    SET_KINEMATICS_LIMIT X_ACCEL={x_accel} Y_ACCEL={y_accel}


    # Go to starting position
    G0 X{x_min} Y{y_min} Z{z_pos} F{speed*60}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}

            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}

        # Small pattern
            # Small diagonals
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}

            # Small box
        {% for i in range(4) %}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
        {% endfor %}
    {% endfor %}

    { action_respond_info("TEST_SPEED: CAN NOT RESTORE AXIS LIMITS! Check these.") }
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}
    
    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_AXIS_SPEED



# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True


[respond]
default_type: echo
